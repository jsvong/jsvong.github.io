<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx Tumblr on == TL;DR ==</title>
    <link>https://tldr.jsv.me/categories/nginx-tumblr/</link>
    <description>Recent content in Nginx Tumblr on == TL;DR ==</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://tldr.jsv.me/categories/nginx-tumblr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>亲爱的我把 Tumblr 反向代理了</title>
      <link>https://tldr.jsv.me/posts/reverse-proxy-tumblr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tldr.jsv.me/posts/reverse-proxy-tumblr/</guid>
      <description>content {:toc}  序 终于搬砖将自己的 Tumblr 重新搭好，然后发现xx移动把 Tumblr 墙了👀。决定用「反向代理」这种简单粗暴直接的方式实现无阻碍访问。
 过程 初始设置 一般会使用 Nginx 来做反向代理。找到了一个现成配置是用来反向代理 Tumblr 的：
(via Wood Tale)
在自己的 VPS 服务器上照此设置了 Nginx，然并卵，实际使用中所有的图片仍然显示不出来。
 问题分析 Tumblr 把图片分为两种：装饰网页用的底图、logo 等等，以及发表内容时上传的照片、动图等。前者被 Tumblr 统一放在了 static.tumblr.com 服务器上，后者所在的服务器则使用了 数字.media.tumblr.com 这种形式的子域名。
事实上除了图片，Tumblr 还会在类似 assets.tumblr.com 这样的服务器上放置一些 JS 代码。所以，需要针对所有这些服务器设置反向代理。
 改进设置 利用 Nginx 的 sub_filter，先把页面中所有的 tumblr.com 替换为 sample.com，即添加这行：
(注#1：并不是所有 Nginx 的版本都支持超过一个 sub_filter，所以请更新 Nginx 到最新版。)
(注#2：个人域名的 DNS 服务商最好支持 catch-all，即对 *.sample.com 这种形式的解析，这样就不用额外处理每一个子域名。)
之后利用正则表达式和变量，配置对上述服务器的反向代理：
server { listen 80; server_name ~^(?&amp;lt;subdomain&amp;gt;\S+)\.sample\.com$; location / { resolver 8.</description>
    </item>
    
  </channel>
</rss>